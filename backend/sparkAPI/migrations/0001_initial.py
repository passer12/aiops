# Generated by Django 4.2.13 on 2024-07-06 20:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("gitRepo", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TreeNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=100)),
                ("label", models.CharField(max_length=255)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="sparkAPI.treenode",
                    ),
                ),
                (
                    "repo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="gitRepo.repository",
                    ),
                ),
            ],
            options={
                "unique_together": {("repo", "key")},
            },
        ),
        migrations.CreateModel(
            name="NodeScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score_readability", models.FloatField(blank=True, null=True)),
                (
                    "score_readability_evaluations",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "score_readability_suggestions",
                    models.TextField(blank=True, null=True),
                ),
                ("score_performance", models.FloatField(blank=True, null=True)),
                (
                    "score_performance_evaluations",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "score_performance_suggestions",
                    models.TextField(blank=True, null=True),
                ),
                ("score_usability", models.FloatField(blank=True, null=True)),
                (
                    "score_usability_evaluations",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "score_usability_suggestions",
                    models.TextField(blank=True, null=True),
                ),
                ("score_security", models.FloatField(blank=True, null=True)),
                ("score_security_evaluations", models.TextField(blank=True, null=True)),
                ("score_security_suggestions", models.TextField(blank=True, null=True)),
                ("score_maintainability", models.FloatField(blank=True, null=True)),
                (
                    "score_maintainability_evaluations",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "score_maintainability_suggestions",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "node",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score",
                        to="sparkAPI.treenode",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NodeData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="sparkAPI.treenode",
                    ),
                ),
            ],
        ),
    ]
